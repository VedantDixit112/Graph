class Solution {
    Map<String,Integer>map;
    Map<String,Integer>map1;
    int count;
    int m=0;
    public int largestIsland(int[][] arr) {
        map1=new HashMap<>();
        m=arr[0][0];
        Set<Integer>set=new HashSet<>();
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[0].length;j++){
                set.add(arr[i][j]);
            }
        }
        if(set.size()==1){
            return m==1?arr.length*arr[0].length:1;
        }
        boolean [][]vis=new boolean[arr.length][arr[0].length];
        int [][]dis=new int[arr.length][arr[0].length];
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[i].length;j++){
                if(arr[i][j]==1){
                    vis[i][j]=true;
                    map=new HashMap<>();
                    int b=path(arr,i,j,vis);
                    count--;
                    for(String a1:map.keySet()){
                        int a=a1.indexOf("%");
                        int i1=Integer.parseInt(a1.substring(0,a));
                        int j1=Integer.parseInt(a1.substring(a+1,a1.length()));
                        dis[i1][j1]=b+1;
                        map1.put(a1,b+1);
                    }
                }
            }
        }
        int max1=Integer.MIN_VALUE;
        for(String l:map1.keySet()){
            int a=l.indexOf("%");
            int i=Integer.parseInt(l.substring(0,a));
            int j=Integer.parseInt(l.substring(a+1,l.length()));
            Map<Integer,Integer>map2;
            if(i-1>=0 && arr[i-1][j]==0){
                int i1=i-1;
                int j1=j;
                map2=new HashMap<>();
                if(i1-1>=0 && dis[i1-1][j1]!=0 && arr[i1-1][j1]!=arr[i][j]){
                    map2.put(arr[i1-1][j1],dis[i1-1][j1]);
                }
                if(j1-1>=0 && dis[i1][j1-1]!=0 && arr[i1][j1-1]!=arr[i][j]){
                     map2.put(arr[i1][j1-1],dis[i1][j1-1]);
                }
                if(j1+1<arr[0].length && dis[i1][j1+1]!=0 && arr[i1][j1+1]!=arr[i][j]){
                    map2.put(arr[i1][j1+1],dis[i1][j1+1]);
                }
                 if(i1+1<arr.length && dis[i1+1][j1]!=0 && arr[i1+1][j1]!=arr[i][j]){
                     map2.put(arr[i1+1][j1],dis[i1+1][j1]);
                }
                   int sum=0;
            for(int l5:map2.keySet()){
                sum+=map2.get(l5);
            }
            max1=Math.max(max1,sum+dis[i][j]+1);
            }
            if(j-1>=0 && arr[i][j-1]==0){
                int i1=i;
                int j1=j-1;
                map2=new HashMap<>();
                if(i1-1>=0 && dis[i1-1][j1]!=0 && arr[i1-1][j1]!=arr[i][j]){
                    map2.put(arr[i1-1][j1],dis[i1-1][j1]);
                }
                if(j1-1>=0 && dis[i1][j1-1]!=0 && arr[i1][j1-1]!=arr[i][j]){
                    map2.put(arr[i1][j1-1],dis[i1][j1-1]);
                }
                if(j1+1<arr[0].length && dis[i1][j1+1]!=0 && arr[i1][j1+1]!=arr[i][j]){
                    map2.put(arr[i1][j1+1],dis[i1][j1+1]);
                }
                 if(i1+1<arr.length && dis[i1+1][j1]!=0 && arr[i1+1][j1]!=arr[i][j]){
                    map2.put(arr[i1+1][j1],dis[i1+1][j1]);
                }
                   int sum=0;
            for(int l5:map2.keySet()){
                sum+=map2.get(l5);
            }
            max1=Math.max(max1,sum+dis[i][j]+1);
            }
            if(i+1<arr.length && arr[i+1][j]==0){
                int i1=i+1;
                int j1=j;
                map2=new HashMap<>();
                if(i1-1>=0 && dis[i1-1][j1]!=0 && arr[i1-1][j1]!=arr[i][j]){
                    map2.put(arr[i1-1][j1],dis[i1-1][j1]);
                }
                if(j1-1>=0 && dis[i1][j1-1]!=0 && arr[i1][j1-1]!=arr[i][j]){
                     map2.put(arr[i1][j1-1],dis[i1][j1-1]);
                }
                if(j1+1<arr[0].length && dis[i1][j1+1]!=0 && arr[i1][j1+1]!=arr[i][j]){
                     map2.put(arr[i1][j1+1],dis[i1][j1+1]);
                }
                 if(i1+1<arr.length && dis[i1+1][j1]!=0 && arr[i1+1][j1]!=arr[i][j]){
                     map2.put(arr[i1+1][j1],dis[i1+1][j1]);
                }
                   int sum=0;
            for(int l5:map2.keySet()){
                sum+=map2.get(l5);
            }
            max1=Math.max(max1,sum+dis[i][j]+1);
            }
            if(j+1<arr[0].length && arr[i][j+1]==0){
                int i1=i;
                int j1=j+1;
                map2=new HashMap<>();
                if(i1-1>=0 && dis[i1-1][j1]!=0 && arr[i1-1][j1]!=arr[i][j]){
                     map2.put(arr[i1-1][j1],dis[i1-1][j1]);
                }
                if(j1-1>=0 && dis[i1][j1-1]!=0 && arr[i1][j1-1]!=arr[i][j]){
                      map2.put(arr[i1][j1-1],dis[i1][j1-1]);
                }
                if(j1+1<arr[0].length && dis[i1][j1+1]!=0 && arr[i1][j1+1]!=arr[i][j]){
                    map2.put(arr[i1][j1+1],dis[i1][j1+1]);
                }
                 if(i1+1<arr.length && dis[i1+1][j1]!=0 && arr[i1+1][j1]!=arr[i][j]){
                    map2.put(arr[i1+1][j1],dis[i1+1][j1]);
                }
                   int sum=0;
            for(int l5:map2.keySet()){
                sum+=map2.get(l5);
            }
            max1=Math.max(max1,sum+dis[i][j]+1);
            }
        }
        return max1;
    }
    public int path(int [][]arr,int i,int j,boolean [][]vis){
        if(vis[i][j]){
            StringBuilder sb=new StringBuilder();
            sb.append(i);
            sb.append("%");
            sb.append(j);
            map.put(sb.toString(),0);
        }
        arr[i][j]=count;
        int total=0;
        if(i-1>=0 && !vis[i-1][j]){
            vis[i-1][j]=true;
            if(arr[i-1][j]==1){
                int t=1+path(arr,i-1,j,vis);
                total+=t;
            }
        }
        if(j-1>=0 && !vis[i][j-1]){
            vis[i][j-1]=true;
            if(arr[i][j-1]==1){
                int t=1+path(arr,i,j-1,vis);
                total+=t;
            }
        }
         if(i+1<arr.length && !vis[i+1][j]){
            vis[i+1][j]=true;
            if(arr[i+1][j]==1){
                 int t=1+path(arr,i+1,j,vis);
                 total+=t;
            }
        }
         if(j+1<arr[0].length  && !vis[i][j+1]){
            vis[i][j+1]=true;
            if(arr[i][j+1]==1){
                int t=1+path(arr,i,j+1,vis);
                total+=t;
            }
        }
        return total;
    }
}
