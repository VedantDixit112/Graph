class Solution {
    List<List<Integer>>res=new ArrayList<>();
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>>ans) {
        List<List<Integer>>adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<ans.size();i++){
           int a=ans.get(i).get(0);
           int b=ans.get(i).get(1);
           adj.get(a).add(b);
           adj.get(b).add(a);
        }
        boolean []vis=new boolean[n];
        int []ds=new int[n];
        int []ls=new int[n];
        path(0,adj,vis,-1,ds,ls,0);
        return res;
    }
    public void path(int id,List<List<Integer>>adj,boolean []vis,int par,int []ds,int []ls,int time){
        vis[id]=true;
        ds[id]=++time;
        ls[id]=++time;
        for(int l:adj.get(id)){
            if(!vis[l]){
                path(l,adj,vis,id,ds,ls,time);
                 ls[id]=Math.min(ls[id],ls[l]);
                if(ds[id]<ls[l]){
                    List<Integer>ans1=new ArrayList<>();
                    ans1.add(id);
                    ans1.add(l);
                    res.add(new ArrayList(ans1));
                }
            }
            else{
                if(l!=par){
                    ls[id]=Math.min(ls[id],ds[l]);
                }
            }
        }
    }
}
