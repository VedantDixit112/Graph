class Solution {
    int []res;
    int min=Integer.MAX_VALUE;
    public int findShortestCycle(int n, int[][] arr) {
        List<List<Integer>>adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<arr.length;i++){
            int a=arr[i][0];
            int b=arr[i][1];
            adj.get(a).add(b);
            adj.get(b).add(a);
        }
        boolean []vis=new boolean[n];
        res=new int[n];
        for(int i=0;i<n;i++){
            if(!vis[i]){
                path(adj,i,vis,0,-1);
            }
        }
        return min==Integer.MAX_VALUE?-1:min;
    }
    public void path(List<List<Integer>>adj,int id,boolean []vis,int count,int par){
        if(count>=min){
            return;
        }
        vis[id]=true;
        res[id]=count;
        for(int l:adj.get(id)){
            if(!vis[l]){
                path(adj,l,vis,count+1,id);
            }
            else{
                if(l!=par){
                    min=Math.min(min,Math.abs(res[id]-res[l])+1);
                }
            }
        }
        vis[id]=false;
    }
}
