class Solution {
    public int longestIncreasingPath(int[][] arr) {
        boolean [][]vis=new boolean[arr.length][arr[0].length];
        int [][]res=new int[arr.length][arr[0].length];
        for(int i=0;i<res.length;i++){
            for(int j=0;j<res[0].length;j++){
                res[i][j]=-1;
            }
        }
        int max1=Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[i].length;j++){
                int p1=path(arr,res,vis,i,j);
                max1=Math.max(max1,p1);
            }
        }
        return max1+1;
    }
    public int  path(int [][]arr,int [][]res,boolean [][]vis,int i,int j){
        if(res[i][j]!=-1){
            return res[i][j];
        }
        if(vis[i][j]){
            return 0;
        }
        int max=0;
        vis[i][j]=true;
        if(i-1>=0  && arr[i-1][j]>arr[i][j]){
            int a=1+path(arr,res,vis,i-1,j);
            max=Math.max(max,a);
        }
        if(j-1>=0  && arr[i][j-1]>arr[i][j]){
            int a=1+path(arr,res,vis,i,j-1);
            max=Math.max(max,a);
        }
        if(i+1<arr.length && arr[i+1][j]>arr[i][j]){
            int a=1+path(arr,res,vis,i+1,j);
            max=Math.max(max,a);
        }
        if(j+1<arr[0].length  && arr[i][j+1]>arr[i][j]){
            int a=1+path(arr,res,vis,i,j+1);
            max=Math.max(max,a);
        }
        return res[i][j]=max;
    }
}
